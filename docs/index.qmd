---
title: "Seer SDK Guide"
format:
    html: default
    # ipynb: default

---

## Installation
The package can be installed and imported using the official SeerSDK package on pip. This can be installed using: 

```{shell}
$ pip install seer-pas-sdk
```

## Usage

This page gives an overview of the SDK's feature. Complete documentation for each class / method can be found [here](reference/).

### Configuration
PAS has a simple authorization system that just involves your username and password fields like on the web app. You can define your username and password for your own ready reference and convenience as follows:
```{python}
USERNAME = "gnu403"
PASSWORD = "Test!234567"
```

You may also choose to pass in an `instance` param in the SDK object to instantiate the PAS SDK to the EU or US instance.:
```{python}
INSTANCE = "US"
```

By default, if you don't specify an instance, the PAS SDK will be instantiated with the US instance.

### Instantiation
After importing the SeerSDK module, you can instantiate an object in the following way:
```{python}
#| eval: false
from seer_pas_sdk import SeerSDK

# Instantiate an SDK object with your credentials:
sdk = SeerSDK(USERNAME, PASSWORD)

# You could alternatively pass your credentials and/or the instance directly into the instantiated object.
sdk = SeerSDK(USERNAME, PASSWORD, INSTANCE)
```

```{python}
#| echo: false
#| output: true
print(f"User '{USERNAME}' logged in.")
```
You can then use the SDK's methods to create, query, or retrieve projects, plates, samples, and analyses.
Full documentation can be found [here](https://seerbio.github.io/seer-pas-sdk/reference/SeerSDK.html).
Additional information and examples can also be found below.

### Multi Tenant Management 
Introduced in version 0.2.0

By default, you will be active in your home tenant upon log in. The home tenant is defined as the organization account that issued the original invitation for the user to join PAS.
The optional 'tenant' parameter is available in the SeerSDK constructor to navigate directly to a desired tenant.
A notification message will display upon login.


The following tools are available to navigate between tenants:
```{python}
#| eval: false
from seer_pas_sdk import SeerSDK

sdk = SeerSDK(USERNAME, PASSWORD, INSTANCE, tenant='My Active Tenant')

# Retrieve value of current active tenant
print(sdk.get_active_tenant())

# List available tenants
print(sdk.list_user_tenants())

# Switch active tenant
pas.switch_tenant('My Next Tenant')

```

```{python}
#| echo: false
#| output: true
print(f"User '{USERNAME}' logged in.")
print("You are now active in My Active Tenant")
print("My Active Tenant")
print(
    {'My Active Tenant' : 'abc1234abc1234',
    'My Next Tenant' : 'abc1234abc1232'
    }
)
print("You are now active in My Next Tenant")
```

### `PlateMap` Object

The PAS Python SDK would allow users to make plate maps file from within the SDK using the `PlateMap` class. The interface of the plate map file contains the following parameters, all of which need to be passed in as lists:

* MS file name as `ms_file_name` 
* Sample name as `sample_name`
* Sample ID as `sample_id`
* Well location as `well_location`
* Nanoparticle as `nanoparticle` 
* Nanoparticle ID as `nanoparticle_id`
* Control as `control`
* Control ID as `control_id`
* Instrument name as `instrument_name`
* Date sample preparation as `date_sample_preparation`
* Sample volume as `sample_volume`
* Peptide concentration as `peptide_concentration`
* Peptide mass sample as `peptide_mass_sample`
* Dilution factor as `dilution_factor`
* Kit ID as `kit_id`
* Plate ID as `plate_id`
* Plate Name as `plate_name`

Based on the length of the `ms_file_name` list passed, if the number of parameters passed in for the rest of the fields are less than the length of the `ms_file_name` list, then the rest of the fields are defaulted to `None`. If more number of fields are passed, then the class would throw a `ValueError`

This is how a plate map file could be made: 
```{python}
from seer_pas_sdk import PlateMap

sample_plate_map_file = PlateMap(
    ms_file_name =["AgamSDKTest1.raw", "AgamSDKTest2.raw"],
    sample_name = ["A111", "A112"], 
    sample_id = ["A111", "A112"], 
    well_location = ["C11", "D11"], 
    nanoparticle = ["NONE"], 
    nanoparticle_id = ["NONE"], 
    control = ["MPE Control"], 
    control_id = ["MPE Control"], 
    instrument_name = [], 
    date_sample_preparation = [], 
    sample_volume = [20], 
    peptide_concentration = [59.514], 
    peptide_mass_sample = [8.57], 
    dilution_factor = [1], 
    kit_id = [], 
    plate_id = ["A11", "A11"], 
    plate_name = ["A11", "A11"] 
)

# Or alternatively, this would be the same as the following (we've left some fields empty which would default them to `None`):
another_plate_map_file = PlateMap(
    ms_file_name =["AgamSDKTest1.raw", "AgamSDKTest2.raw"],
    sample_name = ["A111", "A112"], 
    sample_id = ["A111", "A112"], 
    well_location = ["C11", "D11"], 
    nanoparticle = ["NONE"], 
    nanoparticle_id = ["NONE"], 
    control = ["MPE Control"], 
    control_id = ["MPE Control"], 
    sample_volume = [20], 
    peptide_concentration = [59.514], 
    peptide_mass_sample = [8.57], 
    dilution_factor = [1], 
    plate_id = ["A11", "A11"], 
    plate_name = ["A11", "A11"] 
)

import pickle
print(pickle.dumps(another_plate_map_file) == pickle.dumps(sample_plate_map_file)) # checks for equality
print(sample_plate_map_file)
```

You could also convert the `PlateMap` object into a `DataFrame` using the `to_df` function implemented within the class. Example:
```{python}
pm_file_df = sample_plate_map_file.to_df()
print(pm_file_df)
```

You could also convert it to a CSV file (which can also be exported) using the `to_csv` function implemented within the class:

```{python}
pm_file_csv = sample_plate_map_file.to_csv()
print(pm_file_csv)
```

### [Optional] Logging
For your own convenience, you can define a log function that allows you to print data from the SDK in a much better and readable manner.
```{python}
import pandas as pd

pd.set_option('display.max_rows', None)
pd.set_option('display.max_columns', None)
pd.set_option('display.width', 1000)
pd.set_option('display.colheader_justify', 'center')
pd.set_option('display.precision', 3)

def log(fn):
    if isinstance(fn, pd.DataFrame):
            print(fn.head()) # shorten the output
    else:
        print(fn)

def log_df(fn):
    for entry in fn:
        fn[entry] = fn[entry].head()
    print(fn)
```




## Examples

### Get Spaces
Fetches a list of spaces for the authenticated user.

###### <u>Params</u>
None.
<br>

###### <u>Returns</u>
`spaces`: (`list`) List of space objects for the authenticated user.

###### <u>Example</u>
```{python}
#| eval: false
spaces = sdk.get_spaces()
log(spaces)
```
```
[{'id': None, 'usergroup_name': 'General', 'description': '', 'notes': '', 'created_by': '04936dea-d255-4130-8e82-2f28938a8f9a', 'created_timestamp': '2023-09-13T21:59:33.569Z', 'last_modified_by': '04936dea-d255-4130-8e82-2f28938a8f9a', 'last_modified_timestamp': '2023-09-13T21:59:33.569Z', 'userIds': None}, 
{'id': '150b3460-a7d2-11ed-9de7-d59d51e545d5', 'usergroup_name': 'My Space', 'description': 'My Space', 'notes': 'My Space', 'created_by': '04936dea-d255-4130-8e82-2f28938a8f9a', 'created_timestamp': '2023-02-08T17:00:25.657Z', 'last_modified_by': '04936dea-d255-4130-8e82-2f28938a8f9a', 'last_modified_timestamp': '2023-02-09T01:33:14.397Z', 'userIds': 'ad92b15e-79fe-444d-ac9b-15ef1d15e148,31c1af05-a1c0-4d1b-8073-08fa4bb4207a,e7f7026c-a23b-4732-bf34-8511f5ff83c9,69b7d189-fcc1-4cc8-ae6c-f4fa49012ea0,c972c073-20e4-40ce-825b-d5adb718e419,d4004b39-aeb5-4284-9117-0ca747abe7a6,906b2967-e4c1-4e66-a546-c3412da8a6e6,3d219df6-255f-4aad-af53-408cb24ccab6,1db51bfb-2df1-42c2-baee-693794a5ae66'}]
```

<hr>


### Get Plate Metadata
Fetches a list of plates for the authenticated user. If no `plate_id` is provided, returns all plates for the authenticated user. If `plate_id` is provided, returns the plate with the given `plate_id`, provided it exists. 

Same as `get_plate_metadata` but returns a `DataFrame` object instead.

###### <u>Params</u>
* `plate_id`: (`str`, optional) Unique ID of the plate to be fetched, defaulted to `None`.
* `df`: (`bool`, optional) Boolean denoting whether the user wants the response back in JSON or a DataFrame object.
<br>

###### <u>Returns</u>
`plates`: (`list` or `DataFrame`) `list` or `DataFrame` of plate objects for the authenticated user.

###### <u>Example</u>
```{python}
#| eval: false
plates = sdk.get_plate_metadata()
log(plates)
```
```
[{'id': '303bfc20-87d7-11ee-b03f-27a54e8c1798', 'plate_name': 'some_plate_name', 'plate_id': 'unique223id', 'description': None, 'notes': None, 'created_by': '04936dea-d255-4130-8e82-2f28938a8f9a', 'created_timestamp': '2023-11-20T19:01:19.249Z', 'last_modified_by': '04936dea-d255-4130-8e82-2f28938a8f9a', 'last_modified_timestamp': '2023-11-20T19:01:26.881Z', 'user_group': None}, {'id': '0ddf9920-87d7-11ee-b03f-27a54e8c1798', 'plate_name': 'some_plate_name', 'plate_id': 'unique223id', 'description': None, 'notes': None, 'created_by': '04936dea-d255-4130-8e82-2f28938a8f9a', 'created_timestamp': '2023-11-20T19:00:21.602Z', 'last_modified_by': '04936dea-d255-4130-8e82-2f28938a8f9a', 'last_modified_timestamp': '2023-11-20T19:00:27.273Z', 'user_group': None}, {'id': '56098680-87d6-11ee-b03f-27a54e8c1798', 'plate_name': 'some_plate_name', 'plate_id': 'unique223id', 'description': None, 'notes': None, 'created_by': '04936dea-d255-4130-8e82-2f28938a8f9a', 'created_timestamp': '2023-11-20T18:55:13.174Z', 'last_modified_by': '04936dea-d255-4130-8e82-2f28938a8f9a', 'last_modified_timestamp': '2023-11-20T18:55:19.353Z', 'user_group': None}, {'id': '9be849e0-7ce9-11ee-8da8-db71557f54e4', 'plate_name': '11062023-A11', 'plate_id': '11062023-A11', 'description': None, 'notes': None, 'created_by': '04936dea-d255-4130-8e82-2f28938a8f9a', 'created_timestamp': '2023-11-06T21:15:28.037Z', 'last_modified_by': '04936dea-d255-4130-8e82-2f28938a8f9a', 'last_modified_timestamp': '2023-11-06T22:52:14.958Z', 'user_group': None}, {'id': '2bbdac30-66f7-11ee-abb2-359a84c72f54', 'plate_name': 'some_plate_name', 'plate_id': 'unique223id', 'description': None, 'notes': None, 'created_by': '04936dea-d255-4130-8e82-2f28938a8f9a', 'created_timestamp': '2023-10-09T22:57:07.204Z', 'last_modified_by': '04936dea-d255-4130-8e82-2f28938a8f9a', 'last_modified_timestamp': '2023-10-09T22:57:12.228Z', 'user_group': None}]
```

You can also pass in a specific `plate_id` to specifically fetch a plate.
```{python}
#| eval: false
plate_id = "00d1ac50-1149-11ee-85b5-bd8ec5ef4e32"
sample_plate = sdk.get_plate_metadata(plate_id)
log(sample_plate)
```
```
[{'id': '00d1ac50-1149-11ee-85b5-bd8ec5ef4e32', 'plate_name': 'finalPlateNameTest', 'plate_id': 'finalPlateIdTest', 'description': None, 'notes': None, 'created_by': '04936dea-d255-4130-8e82-2f28938a8f9a', 'created_timestamp': '2023-06-22T22:06:13.963Z', 'last_modified_by': '04936dea-d255-4130-8e82-2f28938a8f9a', 'last_modified_timestamp': '2023-06-22T22:06:18.470Z', 'user_group': None}]
```

With the `df` flag set to `True`:
```{python}
#| eval: false
sample_plate = sdk.get_plate_metadata(plate_id, df=True)
log(sample_plate)
```
```
                    id                       plate_name          plate_id     description notes               created_by                  created_timestamp                last_modified_by            last_modified_timestamp  user_group
0  00d1ac50-1149-11ee-85b5-bd8ec5ef4e32  finalPlateNameTest  finalPlateIdTest     None     None  04936dea-d255-4130-8e82-2f28938a8f9a  2023-06-22T22:06:13.963Z  04936dea-d255-4130-8e82-2f28938a8f9a  2023-06-22T22:06:18.470Z    None
```

<hr>



### Get Plate
Fetches samples (and MS data files) for a `plate_id` (provided that the `plate_id` is valid and has samples associated with it) for an authenticated user. 

The function returns a DataFrame object if the `df` flag is passed in as True, otherwise a nested dict object is returned instead. If the both the `df` and `msdata` flags are passed in as True, then a nested DataFrame object is returned instead.

###### <u>Params</u>
* `plate_id`: (`str`, optional) Unique ID of the plate to be fetched, defaulted to `None`.
* `msdata`: (`bool`, optional) Boolean flag denoting whether the user wants relevant MS data files associated with the samples.
* `df`: (`bool`, optional) Boolean denoting whether the user wants the response back in JSON or a DataFrame object.
* `flat`: (`bool`, optional) Boolean denoting whether attributes in the 'ms_data_files' object should be pushed to the top level object.
<br>

###### <u>Returns</u>
`res`: (`DataFrame`) List/`DataFrame` of sample / MS data file objects for the authenticated user.

###### <u>Example</u>

```{python}
#| eval: false
plate_id = "00d1ac50-1149-11ee-85b5-bd8ec5ef4e32"
sample_plate = sdk.get_plate(plate_id)
log(sample_plate)
```
```
[{'id': '03692010-1149-11ee-85b5-bd8ec5ef4e32', 'sample_id': '02dd81e0-1149-11ee-85b5-bd8ec5ef4e32', 'raw_file_path': '00d1ac50-1149-11ee-85b5-bd8ec5ef4e32/20230622220614171/AgamSDKTest2.raw', 'well_location': 'D11', 'nanoparticle': '', 'instrument_name': '', 'created_by': '04936dea-d255-4130-8e82-2f28938a8f9a', 'created_timestamp': '2023-06-22T22:06:18.309Z', 'last_modified_by': '04936dea-d255-4130-8e82-2f28938a8f9a', 'last_modified_timestamp': '2023-06-22T22:06:18.309Z', 'user_group': None, 'sample_id_tracking': 'A112', 'nanoparticle_id': '', 'control': '', 'control_id': '', 'date_sample_prep': '', 'sample_volume': '', 'peptide_concentration': '', 'peptide_mass_sample': '', 'dilution_factor': '', 'kit_id': None, 'injection_timestamp': None, 'ms_instrument_sn': None, 'recon_volume': None, 'gradient': None}, 
{'id': '03195260-1149-11ee-85b5-bd8ec5ef4e32', 'sample_id': '020faa90-1149-11ee-85b5-bd8ec5ef4e32', 'raw_file_path': '00d1ac50-1149-11ee-85b5-bd8ec5ef4e32/20230622220614171/AgamSDKTest1.raw', 'well_location': 'C11', 'nanoparticle': 'NONE', 'instrument_name': '', 'created_by': '04936dea-d255-4130-8e82-2f28938a8f9a', 'created_timestamp': '2023-06-22T22:06:17.787Z', 'last_modified_by': '04936dea-d255-4130-8e82-2f28938a8f9a', 'last_modified_timestamp': '2023-06-22T22:06:17.787Z', 'user_group': None, 'sample_id_tracking': 'A111', 'nanoparticle_id': 'NONE', 'control': 'MPE Control', 'control_id': 'MPE Control', 'date_sample_prep': '', 'sample_volume': '20.0', 'peptide_concentration': '59.514', 'peptide_mass_sample': '8.57', 'dilution_factor': '1.0', 'kit_id': None, 'injection_timestamp': None, 'ms_instrument_sn': None, 'recon_volume': None, 'gradient': None}]
```

With `df` flag set to `True`:
```{python}
#| eval: false
sample_plate = sdk.get_plate(plate_id=plate_id, df=True)
log(sample_plate)
```
```
                    id                                sample_id                                 raw_file_path                    well_location nanoparticle instrument_name               created_by                  created_timestamp                last_modified_by            last_modified_timestamp  user_group sample_id_tracking nanoparticle_id   control     control_id  date_sample_prep sample_volume peptide_concentration peptide_mass_sample dilution_factor kit_id injection_timestamp ms_instrument_sn recon_volume gradient
0  03692010-1149-11ee-85b5-bd8ec5ef4e32  02dd81e0-1149-11ee-85b5-bd8ec5ef4e32  00d1ac50-1149-11ee-85b5-bd8ec5ef4e32/202306222...       D11                                   04936dea-d255-4130-8e82-2f28938a8f9a  2023-06-22T22:06:18.309Z  04936dea-d255-4130-8e82-2f28938a8f9a  2023-06-22T22:06:18.309Z    None           A112                                                                                                                                            None          None              None           None       None
1  03195260-1149-11ee-85b5-bd8ec5ef4e32  020faa90-1149-11ee-85b5-bd8ec5ef4e32  00d1ac50-1149-11ee-85b5-bd8ec5ef4e32/202306222...       C11         NONE                      04936dea-d255-4130-8e82-2f28938a8f9a  2023-06-22T22:06:17.787Z  04936dea-d255-4130-8e82-2f28938a8f9a  2023-06-22T22:06:17.787Z    None           A111              NONE       MPE Control  MPE Control                       20.0             59.514                8.57               1.0       None          None              None           None       None
```

<hr>

### Get MS Data
Fetches MS data files for passed in `sample_ids` (provided they are valid and contain relevant files) for an authenticated user. 

The function returns a dict containing `DataFrame` objects if the `df` flag is passed in as True, otherwise a nested dict object is returned instead.

###### <u>Params</u>
* `sample_ids`: (`list`) List of unique sample IDs.
* `df`: (`bool`, optional) Boolean denoting whether the user wants the response back in JSON or a DataFrame object.
<br>

###### <u>Returns</u>
`res`: (`DataFrame`) `List` or `DataFrame` of MS data file objects for the authenticated user.

###### <u>Example</u>

```{python}
#| eval: false
sample_ids = ["812139c0-15e0-11ee-bdf1-bbaa73585acf", "803e05b0-15e0-11ee-bdf1-bbaa73585acf"]
example = sdk.get_msdata(sample_ids)
log(example)
```
```
[{'id': '81c6a180-15e0-11ee-bdf1-bbaa73585acf', 'sample_id': '812139c0-15e0-11ee-bdf1-bbaa73585acf', 'raw_file_path': '7ec8cad0-15e0-11ee-bdf1-bbaa73585acf/20230628182044224/AgamSDKTest2.raw', 'well_location': 'D11', 'nanoparticle': '', 'instrument_name': '', 'created_by': '04936dea-d255-4130-8e82-2f28938a8f9a', 'created_timestamp': '2023-06-28T18:20:49.006Z', 'last_modified_by': '04936dea-d255-4130-8e82-2f28938a8f9a', 'last_modified_timestamp': '2023-06-28T18:20:49.006Z', 'user_group': None, 'sample_id_tracking': 'A112', 'nanoparticle_id': '', 'control': '', 'control_id': '', 'date_sample_prep': '', 'sample_volume': '', 'peptide_concentration': '', 'peptide_mass_sample': '', 'dilution_factor': '', 'kit_id': None, 'injection_timestamp': None, 'ms_instrument_sn': None, 'recon_volume': None, 'gradient': None}, 
{'id': '816a9ed0-15e0-11ee-bdf1-bbaa73585acf', 'sample_id': '803e05b0-15e0-11ee-bdf1-bbaa73585acf', 'raw_file_path': '7ec8cad0-15e0-11ee-bdf1-bbaa73585acf/20230628182044224/AgamSDKTest1.raw', 'well_location': 'C11', 'nanoparticle': 'NONE', 'instrument_name': '', 'created_by': '04936dea-d255-4130-8e82-2f28938a8f9a', 'created_timestamp': '2023-06-28T18:20:48.408Z', 'last_modified_by': '04936dea-d255-4130-8e82-2f28938a8f9a', 'last_modified_timestamp': '2023-06-28T18:20:48.408Z', 'user_group': None, 'sample_id_tracking': 'A111', 'nanoparticle_id': 'NONE', 'control': 'MPE Control', 'control_id': 'MPE Control', 'date_sample_prep': '', 'sample_volume': '20.0', 'peptide_concentration': '59.514', 'peptide_mass_sample': '8.57', 'dilution_factor': '1.0', 'kit_id': None, 'injection_timestamp': None, 'ms_instrument_sn': None, 'recon_volume': None, 'gradient': None}]
```

There is also an option to return everything as a DataFrame instead:
```{python}
#| eval: false
example = sdk.get_msdata(sample_ids, df=True)
log(example)
```
```
                    id                                sample_id                                 raw_file_path                    well_location nanoparticle instrument_name               created_by                  created_timestamp                last_modified_by            last_modified_timestamp  user_group sample_id_tracking nanoparticle_id   control     control_id  date_sample_prep sample_volume peptide_concentration peptide_mass_sample dilution_factor kit_id injection_timestamp ms_instrument_sn recon_volume gradient
0  81c6a180-15e0-11ee-bdf1-bbaa73585acf  812139c0-15e0-11ee-bdf1-bbaa73585acf  7ec8cad0-15e0-11ee-bdf1-bbaa73585acf/202306281...       D11                                   04936dea-d255-4130-8e82-2f28938a8f9a  2023-06-28T18:20:49.006Z  04936dea-d255-4130-8e82-2f28938a8f9a  2023-06-28T18:20:49.006Z    None           A112                                                                                                                                            None          None              None           None       None
1  816a9ed0-15e0-11ee-bdf1-bbaa73585acf  803e05b0-15e0-11ee-bdf1-bbaa73585acf  7ec8cad0-15e0-11ee-bdf1-bbaa73585acf/202306281...       C11         NONE                      04936dea-d255-4130-8e82-2f28938a8f9a  2023-06-28T18:20:48.408Z  04936dea-d255-4130-8e82-2f28938a8f9a  2023-06-28T18:20:48.408Z    None           A111              NONE       MPE Control  MPE Control                       20.0             59.514                8.57               1.0       None          None              None           None       None
```

<hr>


### Get Project Metadata
Fetches a list of projects for the authenticated user. If no `project_id` is provided, returns all projects for the authenticated user. If `project_id` is provided, returns the project with the given `project_id`, provided it exists.

The function returns a dict containing `DataFrame` objects if the `df` flag is passed in as True, otherwise a nested dict object is returned instead.

###### <u>Params</u>
* `project_id`: (`str`, optional) Unique ID of the project to be fetched, defaulted to `None`.
* `df`: (`bool`, optional) Boolean denoting whether the user wants the response back in JSON or a DataFrame object.
<br>

###### <u>Returns</u>
`projects`: (`list` or `DataFrame`) `list` or `DataFrame` of plate objects for the authenticated user.

###### <u>Example</u>
```{python}
#| eval: false
projects = sdk.get_project_metadata()
log(projects)
```
```
[{'id': '542e36d0-87d6-11ee-b03f-27a54e8c1798', 'project_name': 'test_project', 'description': None, 'notes': None, 'created_by': '04936dea-d255-4130-8e82-2f28938a8f9a', 'created_timestamp': '2023-11-20T18:55:10.059Z', 'last_modified_by': '04936dea-d255-4130-8e82-2f28938a8f9a', 'last_modified_timestamp': '2023-11-20T18:55:10.059Z', 'user_group': None}, 
{'id': '221f0e80-66f7-11ee-abb2-359a84c72f54', 'project_name': 'test_project', 'description': None, 'notes': None, 'created_by': '04936dea-d255-4130-8e82-2f28938a8f9a', 'created_timestamp': '2023-10-09T22:56:51.066Z', 'last_modified_by': '04936dea-d255-4130-8e82-2f28938a8f9a', 'last_modified_timestamp': '2023-10-09T22:56:51.066Z', 'user_group': None}]
```

You can also pass in a specific `project_id` to specifically fetch a project.
```{python}
#| eval: false
project_id = "222e0890-0f95-11ee-9c0f-3bf27c252a07"
sample_project = sdk.get_project_metadata(project_id)
log(sample_project)
```
```
[{'id': '222e0890-0f95-11ee-9c0f-3bf27c252a07', 'project_name': 'sdk test projjjjjj', 'description': None, 'notes': None, 'created_by': '04936dea-d255-4130-8e82-2f28938a8f9a', 'created_timestamp': '2023-06-20T18:06:09.397Z', 'last_modified_by': '04936dea-d255-4130-8e82-2f28938a8f9a', 'last_modified_timestamp': '2023-06-20T18:06:09.397Z', 'user_group': None}]
```


<hr>

### Get Project
Fetches samples (and MS data files) for a `project_id` (provided that the `project_id` is valid and has samples associated with it) for an authenticated user. 

The function returns a DataFrame object if the `df` flag is passed in as True, otherwise a nested dict object is returned instead. If the both the `df` and `msdata` flags are passed in as True, then a nested DataFrame object is returned instead.

###### <u>Params</u>
* `project_id`: (`str`, optional) Unique ID of the project to be fetched.
* `msdata`: (`bool`, optional) Boolean flag denoting whether the user wants relevant MS data files associated with the samples.
* `df`: (`bool`, optional) Boolean denoting whether the user wants the response back in JSON or a DataFrame object.
* `flat`: (`bool`, optional) Boolean denoting whether attributes in the 'ms_data_files' object should be pushed to the top level object.
<br>

###### <u>Returns</u>
`res`: (`list` or `DataFrame`) `List` or `DataFrame` of sample / MS data file objects for the authenticated user.

###### <u>Example</u>
```{python}
#| eval: false
project_id = "7e48e150-8a47-11ed-b382-bf440acece26"
sample_project = sdk.get_project(project_id=project_id, msdata=False, df=False)
log(sample_project)
```
```
[{'id': '829509f0-8a47-11ed-b382-bf440acece26', 'plate_id': '81608190-8a47-11ed-b382-bf440acece26', 'sample_name': 'PC6-rep3', 'sample_type': 'Plasma', 'species': 'Human', 'description': None, 'notes': None, 'created_by': '04936dea-d255-4130-8e82-2f28938a8f9a', 'created_timestamp': '2023-01-02T02:45:25.701Z', 'last_modified_by': '04936dea-d255-4130-8e82-2f28938a8f9a', 'last_modified_timestamp': '2023-01-02T02:45:26.863Z', 'user_group': None, 'sample_receipt_date': None, 'sample_collection_date': None, 'condition': None, 'plate_name': 'PlateName20230101X', 'custom_lasttestfield': None, 'custom_ttest': None, 'custom_new_test': None, 'custom_customaaaaa': None, 'custom_custom_ab': None, 'custom_pjtest': None, 'biological_replicate': None, 'technical_replicate': None, 'custom_testfield2_2222222': None, 'sample_id': 'PC6-rep3', 'custom_customnamedjfksdfksdjflajsfjaogojsadogkljsdfgklsjdklgjls': None, 'custom_test123': None, 'custom_hcustom1234': None, 'custom_newhfield': None, 'custom_newsamplehh': None, 'custom_difforg': None, 'custom_custom1': None, 'custom_newtestfield33333': None, 'custom_harsh': None, 'custom_yesdfsd': None, 'custom_tdf3222': None, 'custom_yrdy444': None, 'custom_tesdy4444': None, 'custom_newcustomtest1': None, 'custom_rest': None, 'custom_zest': None, 'custom_z222': None, 'custom_tes3333': None, 'custom_rjb': None, 'custom_yoyoyo222': None, 'custom_gditch': None, 'custom_kb23': None, 'custom_kb22': None, 'custom_pj44': None, 'custom_updatetest': None, 'custom_test22222': None, 'custom_tlucky122': None, 'custom_testcustomlongfieldtestcustomlongfieldnamethatissuperlon': None, 'custom_testnewcustomfield81818': None, 'custom_testnt': None, 'well_location': 'C2', 'control': ''}]
```

With the `msdata` and `df` flags set as True:
```{python}
#| eval: false
sample_project = sdk.get_project(project_id=project_id, msdata=True, df=True)
log(sample_project)
```
```
                    id                                 plate_id               sample_name sample_type species description notes               created_by                  created_timestamp                last_modified_by            last_modified_timestamp  user_group sample_receipt_date sample_collection_date condition      plate_name     custom_lasttestfield custom_ttest custom_new_test custom_customaaaaa custom_custom_ab custom_pjtest biological_replicate technical_replicate custom_testfield2_2222222 sample_id custom_customnamedjfksdfksdjflajsfjaogojsadogkljsdfgklsjdklgjls custom_test123 custom_hcustom1234 custom_newhfield custom_newsamplehh custom_difforg custom_custom1 custom_newtestfield33333 custom_harsh custom_yesdfsd custom_tdf3222 custom_yrdy444 custom_tesdy4444 custom_newcustomtest1 custom_rest custom_zest custom_z222 custom_tes3333 custom_rjb custom_yoyoyo222 custom_gditch custom_kb23 custom_kb22 custom_pj44 custom_updatetest custom_test22222 custom_tlucky122
0  829509f0-8a47-11ed-b382-bf440acece26  81608190-8a47-11ed-b382-bf440acece26   PC6-rep3     Plasma     Human     None     None  04936dea-d255-4130-8e82-2f28938a8f9a  2023-01-02T02:45:25.701Z  04936dea-d255-4130-8e82-2f28938a8f9a  2023-01-02T02:45:26.863Z    None            None                 None             None    PlateName20230101X         None             None           None             None              None            None             None                 None                   None            PC6-rep3                        None                                          None             None              None              None             None           None                None               None          None           None           None            None                None             None        None        None         None         None          None            None         None        None        None           None             None             None        \
1  828d41c0-8a47-11ed-b382-bf440acece26  81608190-8a47-11ed-b382-bf440acece26   PC6-rep2     Plasma     Human     None     None  04936dea-d255-4130-8e82-2f28938a8f9a  2023-01-02T02:45:25.649Z  04936dea-d255-4130-8e82-2f28938a8f9a  2023-01-02T02:45:26.863Z    None            None                 None             None    PlateName20230101X         None             None           None             None              None            None             None                 None                   None            PC6-rep2                        None                                          None             None              None              None             None           None                None               None          None           None           None            None                None             None        None        None         None         None          None            None         None        None        None           None             None             None
2  8294e2e0-8a47-11ed-b382-bf440acece26  81586b40-8a47-11ed-b382-bf440acece26   PC6-rep2     Plasma     Human     None     None  04936dea-d255-4130-8e82-2f28938a8f9a  2023-01-02T02:45:25.700Z  04936dea-d255-4130-8e82-2f28938a8f9a  2023-01-02T02:45:26.806Z    None            None                 None             None    PlateName20230101W         None             None           None             None              None            None             None                 None                   None            PC6-rep2                        None                                          None             None              None              None             None           None                None               None          None           None           None            None                None             None        None        None         None         None          None            None         None        None        None           None             None             None
3  8285eec0-8a47-11ed-b382-bf440acece26  81586b40-8a47-11ed-b382-bf440acece26   PC6-rep3     Plasma     Human     None     None  04936dea-d255-4130-8e82-2f28938a8f9a  2023-01-02T02:45:25.602Z  04936dea-d255-4130-8e82-2f28938a8f9a  2023-01-02T02:45:26.753Z    None            None                 None             None    PlateName20230101W         None             None           None             None              None            None             None                 None                   None            PC6-rep3                        None                                          None             None              None              None             None           None                None               None          None           None           None            None                None             None        None        None         None         None          None            None         None        None        None           None             None             None

  custom_testcustomlongfieldtestcustomlongfieldnamethatissuperlon custom_testnewcustomfield81818 custom_testnt well_location control                   ms_data_files
0                        None                                                  None                   None           C2                                   id                        ...
1                        None                                                  None                   None           B2                                   id                        ...
2                        None                                                  None                   None           B2                                   id                        ...
3                        None                                                  None                   None           C2                                   id                        ...
```
<hr>


### Get Analysis Protocols
Fetches a list of analysis protocols for the authenticated user. If no analysis_id is provided, returns all analysis protocols for the authenticated user. If name (and no analysis_id) is provided, returns the analysis protocol with the given name, provided it exists. 

###### <u>Params</u>
* `analysis_id`: (`str`, optional) Unique ID of the analysis protocol to be fetched, defaulted to None.
* `name`: (`str`, optional) Name of the analysis protocol to be fetched, defaulted to None.
<br>

###### <u>Returns</u>
`protocols`: (`list`) List of analysis protocol objects for the authenticated user.

###### <u>Example</u>
```{python}
#| eval: false
analysis_protocols = sdk.get_analysis_protocols()
log(analysis_protocols)
```
```
[{'id': 'f17bf010-3d55-11ee-8e2e-d304769e96eb', 'analysis_protocol_name': 'first analysis protocol for DIA - DIANN 1.8.1 - Prefect - MBR', 'analysis_type': 'DIA', 'version_number': '1', 'description': None, 'notes': None, 'created_by': '04936dea-d255-4130-8e82-2f28938a8f9a', 'created_timestamp': '2023-08-17T23:29:42.870Z', 'parameter_file_path': 'diann-parameter/first_analysis_protocol_for_DIA_-_DIANN_1.8.1_-_Prefect_-_MBR.json', 'user_group': None, 'species': 'Human', 'alg_version': '1.8.1', 'analysis_engine': 'diann', 'scope': 'user'}, {'id': '10', 'analysis_protocol_name': 'first analysis protocol for DIA - DIANN 1.8.1 - Prefect', 'analysis_type': 'DIA', 'version_number': '1', 'description': None, 'notes': None, 'created_by': 'c7b78248-d7f3-4379-8a33-64853dc427a9', 'created_timestamp': '2023-08-17T18:50:02.504Z', 'parameter_file_path': 'diann-parameter/diann-20230915.json', 'user_group': None, 'species': 'Human', 'alg_version': '1.8.1', 'analysis_engine': 'diann', 'scope': 'system'}, 
{'id': '5945ddc0-22b5-11ee-886d-551326b21c66', 'analysis_protocol_name': '0714-diann181-libfree-mbr', 'analysis_type': 'DIA', 'version_number': '1', 'description': None, 'notes': None, 'created_by': '04936dea-d255-4130-8e82-2f28938a8f9a', 'created_timestamp': '2023-07-15T02:14:37.833Z', 'parameter_file_path': 'diann-parameter/0714-diann181-libfree-mbr.json', 'user_group': None, 'species': 'Human', 'alg_version': '1.8.1', 'analysis_engine': 'diann', 'scope': 'user'}]
```

You can also pass in a specific `name` to specifically fetch an analysis protocol.
```{python}
#| eval: false
protocol_name = "testMSFraggerUpload26"
sample_analysis_protocol = sdk.get_analysis_protocols(analysis_protocol_name=protocol_name)
log(sample_analysis_protocol)
```
```
[{'id': 'dc61a360-6b77-11ed-8ac3-37d35135f08e', 'analysis_protocol_name': 'testMSFraggerUpload26', 'analysis_type': 'DDA', 'version_number': '1', 'description': '', 'notes': '', 'created_by': '04936dea-d255-4130-8e82-2f28938a8f9a', 'created_timestamp': '2022-11-23T21:43:26.142Z', 'parameter_file_path': 'msfragger-parameter/testMSFraggerUpload26.json', 'user_group': None, 'species': 'Human', 'alg_version': '3.4', 'analysis_engine': 'msfragger', 'scope': 'user'}]
```

The same can be done for `analysis_id`.
```{python}
#| eval: false
protocol_id = "dc61a360-6b77-11ed-8ac3-37d35135f08e"
sample_analysis_protocol = sdk.get_analysis_protocols(analysis_protocol_id=protocol_id)
log(sample_analysis_protocol)
```
```
[{'id': 'dc61a360-6b77-11ed-8ac3-37d35135f08e', 'analysis_protocol_name': 'testMSFraggerUpload26', 'analysis_type': 'DDA', 'version_number': '1', 'description': '', 'notes': '', 'created_by': '04936dea-d255-4130-8e82-2f28938a8f9a', 'created_timestamp': '2022-11-23T21:43:26.142Z', 'parameter_file_path': 'msfragger-parameter/testMSFraggerUpload26.json', 'user_group': None, 'species': 'Human', 'alg_version': '3.4', 'analysis_engine': 'msfragger', 'scope': 'user'}]
```

<hr>




### Get Analysis
Returns a list of analyses objects for the authenticated user. If no `analysis_id` is provided, returns all analyses for the authenticated user.

###### <u>Params</u>
`analysis_id`: (`str`, optional) Unique ID of the analysis to be fetched, defaulted to None.
<br>

###### <u>Returns</u>
`analyses`: (`dict`) Contains a list of analyses objects for the authenticated user.

###### <u>Example</u>
```{python}
#| eval: false
analyses = sdk.get_analysis()
log(analyses)
```
```
[{'id': 'c80a0260-856e-11ee-b1b7-ff20dde1461b', 'analysis_name': '11172023-dia-test-0419 reanalysis', 'description': '', 'notes': '', 'analysis_protocol_id': 'cb053660-a48a-11ea-bcfb-f7528a88c755', 'analyzed_by': '04936dea-d255-4130-8e82-2f28938a8f9a', 'start_time': '2023-11-17T17:28:54.451Z', 'end_time': '2023-11-17T17:49:23.492Z', 'last_modified_by': '04936dea-d255-4130-8e82-2f28938a8f9a', 'last_modified_timestamp': '2023-11-17T17:28:54.451Z', 'status': 'SUCCEEDED', 'result_folder': 'e46af6a0-7a11-11eb-882e-1719d79479fd/c80a0260-856e-11ee-b1b7-ff20dde1461b/', 'job_id': 'eac28b3d-f6ba-4644-bce6-6007756d9af7', 'user_group': None, 'project_id': 'e46af6a0-7a11-11eb-882e-1719d79479fd', 'number_msdatafile': '5', 'protein_group_count': 827, 'single_protein_group_count': 562, 'possible_protein_set_size': None, 'peptides_count': 8281, 'contains_control': False, 'job_log_stream_name': 'encyclopedia_group/default/3a364a127b5d4cc5acc348d5d1da3b21', 'contains_sample': True, 'is_folder': False, 'folder_id': None, 'number_sample': 1, 'total_file_size_mb': 5806, 'msdatafile_extensions': '.wiff', 'analysis_protocol_name': 'DIA - first analysis protocol', 'analysis_type': 'DIA', 'plate_id': ['adbc28a0-04ea-11eb-9581-2ddecac39483']}, 
{'id': 'fd62a3b0-834b-11ee-a7fd-912ae102163f', 'analysis_name': '11142023-1 - 1028-3 reanalysis 333111 reanalysis 44122 reanalysis', 'description': '', 'notes': '', 'analysis_protocol_id': '4', 'analyzed_by': '04936dea-d255-4130-8e82-2f28938a8f9a', 'start_time': '2023-11-15T00:14:49.243Z', 'end_time': '2023-11-15T00:59:22.703Z', 'last_modified_by': '04936dea-d255-4130-8e82-2f28938a8f9a', 'last_modified_timestamp': '2023-11-15T00:14:49.243Z', 'status': 'SUCCEEDED', 'result_folder': 'bdf855d0-9beb-11ea-810d-31caeb439dfe/fd62a3b0-834b-11ee-a7fd-912ae102163f/', 'job_id': 'b94f7dfb-a44e-4df0-9581-fa0ce43eaaf2', 'user_group': None, 'project_id': 'bdf855d0-9beb-11ea-810d-31caeb439dfe', 'number_msdatafile': '6', 'protein_group_count': 775, 'single_protein_group_count': None, 'possible_protein_set_size': None, 'peptides_count': 5514, 'contains_control': False, 'job_log_stream_name': 'proteogenomics_group/default/6efe18275eee455a911f0db0e558a598', 'contains_sample': True, 'is_folder': False, 'folder_id': None, 'number_sample': 1, 'total_file_size_mb': 3036, 'msdatafile_extensions': '.raw', 'analysis_protocol_name': 'second analysis protocol for proteogenomics', 'analysis_type': 'PROTEOGENOMICS', 'plate_id': ['0bb11350-8ca8-11ea-911b-f9d607852407']}]
```

You can also pass in a specific `analysis_id` to specifically fetch an analysis.
```{python}
#| eval: false
analysis_id = "00425a60-a850-11ea-b3d7-0171d11d0807"
sample_analysis = sdk.get_analysis(analysis_id)
log(sample_analysis)
```
```
[{'id': '00425a60-a850-11ea-b3d7-0171d11d0807', 'analysis_name': 'EXP19044 - 4 SAMPLE - NEW', 'description': 'DO NOT DELETE - FOR VISUALS', 'notes': '', 'analysis_protocol_id': 'b07d70f0-5471-11ea-90e8-6743ed53f19f', 'analyzed_by': '04936dea-d255-4130-8e82-2f28938a8f9a', 'start_time': '2020-06-06T23:46:54.360Z', 'end_time': '2020-06-07T03:23:30.614Z', 'last_modified_by': '04936dea-d255-4130-8e82-2f28938a8f9a', 'last_modified_timestamp': '2020-06-06T23:46:54.360Z', 'status': 'SUCCEEDED', 'result_folder': '2d89db50-805b-11ea-a3cb-5341c25962a0/00425a60-a850-11ea-b3d7-0171d11d0807/', 'job_id': '1c7dcdb9-21fe-47a3-9f9c-5326cc9662b2', 'user_group': None, 'project_id': '2d89db50-805b-11ea-a3cb-5341c25962a0', 'number_msdatafile': '20', 'protein_group_count': 3641, 'single_protein_group_count': 3184, 'possible_protein_set_size': 3878, 'peptides_count': 32274, 'contains_control': False, 'job_log_stream_name': None, 'contains_sample': True, 'is_folder': False, 'folder_id': None, 'number_sample': None, 'total_file_size_mb': None, 'msdatafile_extensions': None}]
```


<hr>

### Get Analysis Result
Given an `analysis_id`, this function returns all relevant analysis data files in form of DataFrames, if the input is valid and the analysis has succeeded.

In case the analysis has failed for the given `analysis_id`, the function will return a `ValueError`.


###### <u>Params</u>
* `analysis_id`: (`str`) Unique ID of the analysis for which the data is to be fetched.
* `download_path`: (`str`, optional) String flag denoting where the user wants the files downloaded. Can be local or absolute as long as the path is valid. Defaults to an empty string.

###### <u>Returns</u>
`links`: (`dict`) Contains `DataFrame` objects for the `analysis_id`, given that the analysis has been complete.

###### <u>Example</u>
If you want the result as `DataFrame` objects:
```{python}
#| eval: false
analysis_id = "ddff8c40-0493-11ee-bd19-a77197cd1a6b"
analysis_data = sdk.get_analysis_result(analysis_id)
log_df(analysis_data)
```
```
{'peptide_np':                   File Name                     Sample Name     Plate ID Well Nanoparticle   Peptide    Intensity (Log10)  Normalized Intensity (Log10) Protein Group
0  EXP19044_X4533_A_Orbitrap-1_2ug_60min.raw  Test-Sample-112A  EXP19044  B2     SP-0334      FCADCQSK        7.528                   -0.957                    Q8WU79
1  EXP19044_X4534_A_Orbitrap-1_2ug_60min.raw  Test-Sample-112A  EXP19044  B1     SP-0333      FCADCQSK        7.477                   -0.835                    Q8WU79
2  EXP19044_X4533_A_Orbitrap-1_2ug_60min.raw  Test-Sample-112A  EXP19044  B2     SP-0334     FCLSAAHTK        7.873                   -0.613                    O15270
3  EXP19044_X4534_A_Orbitrap-1_2ug_60min.raw  Test-Sample-112A  EXP19044  B1     SP-0333     FCLSAAHTK        7.442                   -0.870                    O15270
4  EXP19044_X4533_A_Orbitrap-1_2ug_60min.raw  Test-Sample-112A  EXP19044  B2     SP-0334    FCIWTESAFR        8.963                    0.478             P36578;H3BM89, 'peptide_panel':      Sample Name     Plate ID    Peptide      Intensity (Log10)  Normalized Intensity (Log10)        Protein Group        MaxRepresentation NP
0  Test-Sample-112A  EXP19044       FCADCQSK        7.528                   -0.823                                 Q8WU79        SP-0334
1  Test-Sample-112A  EXP19044      FCLSAAHTK        7.873                   -0.478                                 O15270        SP-0334
2  Test-Sample-112A  EXP19044     FCIWTESAFR        8.398                    0.047                          P36578;H3BM89        SP-0333
3  Test-Sample-111A  EXP19044     FCIWTESAFR        8.657                    0.192                          P36578;H3BM89        SP-0333
4  Test-Sample-112A  EXP19044  FCFSNEFSTFTHK        8.810                    0.459             A0A0A6YYA0;Q86XR7-2;Q9Y3B3        SP-0333      , 'protein_np':                       File Name                         Sample Name     Plate ID Well Nanoparticle Protein Group  Intensity (Log10)  Normalized Intensity (Log10)                   Protein Names                    Gene Names Biological Process Molecular Function Cellular Component
0          EXP19044_X4534_A_Orbitrap-1_2ug_60min.raw  Test-Sample-112A  EXP19044  B1     SP-0333      P56181-2          8.698                    0.030             Isoform of P56181, Isoform 2 of NADH dehydroge...   NDUFV3           NaN                NaN                NaN
1          EXP19044_X4533_A_Orbitrap-1_2ug_60min.raw  Test-Sample-112A  EXP19044  B2     SP-0334      P56181-2          8.294                   -0.525             Isoform of P56181, Isoform 2 of NADH dehydroge...   NDUFV3           NaN                NaN                NaN
2  EXP19044_X4541_A_Orbitrap-1_2ug_60min_20190829...  Test-Sample-110A  EXP19044  A4     SP-0336      P56181-2          8.780                   -0.156             Isoform of P56181, Isoform 2 of NADH dehydroge...   NDUFV3           NaN                NaN                NaN
3  EXP19044_X4540_A_Orbitrap-1_2ug_60min_20190829...  Test-Sample-110A  EXP19044  A5     SP-0337      P56181-2          8.867                    0.137             Isoform of P56181, Isoform 2 of NADH dehydroge...   NDUFV3           NaN                NaN                NaN
4  EXP19044_X4544_A_Orbitrap-1_2ug_60min_20190829...  Test-Sample-110A  EXP19044  A3     SP-0335      P56181-2          9.837                    0.992             Isoform of P56181, Isoform 2 of NADH dehydroge...   NDUFV3           NaN                NaN                NaN       , 'protein_panel':      Sample Name     Plate ID Protein Group  Intensity (Log10)  Normalized Intensity (Log10)                   Protein Names                    Gene Names MaxRepresentation NP       Biological Process                      Molecular Function                                 Cellular Component
0  Test-Sample-112A  EXP19044    P56181-2          8.294                   -0.418             Isoform of P56181, Isoform 2 of NADH dehydroge...   NDUFV3          SP-0334                                 NaN                                                NaN                                                NaN
1  Test-Sample-110A  EXP19044    P56181-2          9.721                    1.013             Isoform of P56181, Isoform 2 of NADH dehydroge...   NDUFV3          SP-0334                                 NaN                                                NaN                                                NaN
2  Test-Sample-111A  EXP19044    P56181-2          8.819                    0.108             Isoform of P56181, Isoform 2 of NADH dehydroge...   NDUFV3          SP-0334                                 NaN                                                NaN                                                NaN
3  Test-Sample-112A  EXP19044      P56182          8.189                   -0.524                  Ribosomal RNA processing protein 1 homolog A     RRP1          SP-0334        rRNA processing [GO:0006364]  RNA binding [GO:0003723]; protein binding [GO:...  chromosome [GO:0005694]; nucleolus [GO:0005730...
4  Test-Sample-110A  EXP19044      P56182          8.103                   -0.605                  Ribosomal RNA processing protein 1 homolog A     RRP1          SP-0334        rRNA processing [GO:0006364]  RNA binding [GO:0003723]; protein binding [GO:...  chromosome [GO:0005694]; nucleolus [GO:0005730...}
```

If you want the resulting CSV downloaded to the local directory:
```{python}
#| eval: false
analysis_data = sdk.get_analysis_result(analysis_id, download_path="/Users/ajolly/Desktop/seer-sdk")
log(analysis_data)
```
```
{'status': 'Download complete.'}
```

The file will be stored in `downloads/` in the user-specified path under the unique `analysis_id` you entered.
<hr>


### Analysis Complete
Returns the status of the analysis with the given `analysis_id`.

###### <u>Params</u>
`analysis_id`: (`str`) Unique ID of the analysis.

###### <u>Returns</u>
`res`: (`dict`) A dictionary containing the status of the analysis.

###### <u>Example</u>
```{python}
#| eval: false
analysis_id = "ddff8c40-0493-11ee-bd19-a77197cd1a6b"
log(sdk.analysis_complete(analysis_id))
```
```
{'status': 'SUCCEEDED'}
```

<hr>

### List MS Data Files
Lists all the MS data files in the given folder as long as the folder path passed in the params is valid.

###### <u>Params</u>
* `folder` : (`str`, optional) Folder path to list the files from. Defaults to an empty string and displays all files for the user.
* `space` : (`str`, optional) ID of the user group to which the files belong, defaulted to None.

###### <u>Returns</u>
(`list`) Contains the list of files in the folder.

###### <u>Example</u>
```{python}
#| eval: false
folder_path = "2bbdac30-66f7-11ee-abb2-359a84c72f54/20231009225707449"
log(sdk.list_ms_data_files(folder_path))
```
```
['2bbdac30-66f7-11ee-abb2-359a84c72f54/20231009225707449/plateMap_2bbdac30-66f7-11ee-abb2-359a84c72f54.csv', '2bbdac30-66f7-11ee-abb2-359a84c72f54/20231009225707449/AgamSDKTest1.raw', '2bbdac30-66f7-11ee-abb2-359a84c72f54/20231009225707449/AgamSDKTest2.raw']
```

If the folder path is invalid, the result is an empty list.
```{python}
#| eval: false
folder_path = "some/invalid/path"
log(sdk.list_ms_data_files(folder_path))
```
```
[]
```

<hr>

### Download MS Data Files
Downloads all MS data files for `paths` passed in the params to the specified `download_path`.

If no `download_path` is specified or the `download_path` is invalid, the file will be downloaded to the current working directory. 

###### <u>Params</u>
* `paths` : (`list[str]`) List of paths to download.
* `download_path` : (`str`) Path to download the analysis file to, defaulted to current working directory.
* `space` : (`str`, optional) ID of the user group to which the file belongs, defaulted to None.

###### <u>Returns</u>
(`dict`) Message containing whether the file was downloaded or not.

###### <u>Example</u>
```{python}
#| eval: false
download_paths = ["2bbdac30-66f7-11ee-abb2-359a84c72f54/20231009225707449/AgamSDKTest1.raw", "2bbdac30-66f7-11ee-abb2-359a84c72f54/20231009225707449/AgamSDKTest2.raw"]

log(sdk.download_ms_data_files(paths=download_paths, download_path="testing/"))
```
```
Downloading files to "testing"

Downloading AgamSDKTest1.raw
Finished downloading AgamSDKTest1.raw

Downloading AgamSDKTest2.raw
Finished downloading AgamSDKTest2.raw

{'message': 'Files downloaded successfully to testing'}
```

<hr>

### Group Analysis Results
Returns the group analysis data for given `analysis_id` (provided it is valid and the group analysis has been successful) and `box_plot` config info.

###### <u>Params</u>
* `analysis_id`: (`str`) The analysis ID.
* `box_plot`: (`dict`) The box plot configuration needed for the analysis, defaulted to `None`. Contains `feature_type` ("protein" or "peptide") and `feature_ids` (comma separated list of feature IDs) keys.

###### <u>Returns</u>
* res: (`dict`) A dictionary containing the group analysis data.

###### <u>Example</u>

When no `box_plot`config info is specified, the results are as follows. Notice that there is no box plot key in the result dictionary.
```{python}
#| eval: false
group_analysis_id = "c4089c00-16ab-11ec-b589-634014ca2005"
log(sdk.group_analysis_results(group_analysis_id))
```

However when valid box plot information is declared as below, the result will contain a `box_plot` key.
```{python}
#| eval: false
box_plot_info = {
    "feature_type": "protein",
    "feature_ids": ["Q96RL7-2"]
}
log(sdk.group_analysis_results(group_analysis_id, box_plot_info))
```

<hr>

## Analysis Plot Data 
Returns the data points associated with the plots generated on the PAS UI. 

### Volcano Plot (all group analyses)
Returns a collection of volcano plots representing all group analyses run on a single analysis.

##### <u>Params</u>
* `analysis_id`: (`str`) The analysis ID for which the volcano plot data is to be fetched.
* `box_plot`: (`bool`, optional) Flag to indicate whether to include box plot data in the result. Defaults to `False`.

##### <u>Returns</u>
* `volcano_data`: (`dict`) A dictionary containing the volcano plot data for the analysis.

##### <u>Example</u>
```{python}
#| eval: false
analysis_id = "c4089c00-16ab-11ec-b589-634014ca2005"
volcano_data = sdk.get_all_volcano_plot_data(analysis_id, box_plot=True)
pprint(volcano_data)
```
<hr>

### Volcano Plot (for a specific group analysis)
Returns a volcano plot for a specific group analysis.

##### <u>Params</u>
* `analysis_id`: (`str`) The analysis ID for which the volcano plot data is to be fetched.
* `group_analysis_id`: (`str`) The group analysis ID for which the volcano plot data is to be fetched.
* `significance_threshold`: (`float`, optional) The significance threshold for the volcano plot. Defaults to `0.05`.
* `fold_change_threshold`: (`float`, optional) The fold change threshold for the volcano plot. Defaults to `1.0`.
* `label_by`: (`str`, optional) Metric to sort result data. Defaults to "fold_change".
* `cached`: (`bool`, optional) Flag to indicate whether to return a VolcanoPlotBuilder object or not. Defaults to `False`.
* `as_df`: (`bool`, optional) Flag to indicate whether to return the data as a DataFrame. Defaults to `False`.

##### <u>Returns</u>
* `volcano_data`: (`dict` or `DataFrame` or `VolcanoPlotBuilder`) A dictionary, DataFrame or VolcanoPlotBuilder containing the volcano plot data for the specific group analysis.

##### VolcanoPlotBuilder object
Reusuable object that can reuse data from a single Group Analysis to build volcano plots with different settings
```{python}
#| eval: false
analysis_id = "c4089c00-16ab-11ec-b589-634014ca2005"
group_analysis_id = "c4089c00-16ab-11ec-c589-634014ca2005"
volcano_builder = sdk.get_volcano_plot_data(analysis_id, group_analysis_id, cached=True)
volcano_plot1 = volcano_builder.volcano_plot
# Use the builder to get volcano plot data with different settings
volcano_builder.update(significance_threshold=0.1, fold_change_threshold=0.03)
volcano_plot2 = volcano_builder.volcano_plot

##### <u>Example</u>
```{python}
#| eval: false
analysis_id = "c4089c00-16ab-11ec-b589-634014ca2005"
group_analysis_id = "c4089c00-16ab-11ec-c589-634014ca2005"
volcano_data = sdk.get_volcano_plot_data(analysis_id, group_analysis_id, as_df=True)
pprint(volcano_data)
```

<hr> 
#### PCA
Returns PCA data for a given set of analyses

##### <u>Params</u>
analysis_ids : (`list[str]`) IDs of analyses to include in the PCA
type (str): Type of data to be fetched. Must be either "protein" or "peptide".
sample_ids: (`list[str]`, optional) IDs of samples to include in the PCA. If not provided, all samples will be included.
hide_control: (bool, optional) Whether to exclude control samples in the PCA. Defaults to `False`.
as_df: (bool, optional) Whether to return the data as a DataFrame. Defaults to `False`.

##### <u>Returns</u>
pca_data: (`dict` or `DataFrame`) A dictionary or DataFrame containing the PCA data for the specified analyses.

##### <u>Example</u>
```{python}
#| eval: false
analysis_ids = ["c4089c00-16ab-11ec-b589-634014ca2005", "c4089c00-16ab-11ec-c589-634014ca2005"]
pca_data = sdk.get_pca_data(analysis_ids, type="protein", sample_ids=None, hide_control=False, as_df=True)
pprint(pca_data)
```

<hr>